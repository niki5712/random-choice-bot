import asyncio
import mimetypes
import os
from collections import Counter, defaultdict
from datetime import datetime, timezone
from itertools import count
from typing import Any, Dict, Optional

from telethon.sync import TelegramClient, custom, errors, events, types

import config
from common import match_order, search_bot_mention
from constant.chat import id as chat_id
from error import OrderException, OrderLimitIsReachedException
from log import LOG_BOT
from type import MessageKey, Order, OrderSenderKey, SenderKey


# TODO: —É–º–µ—Ç—å –æ–±–Ω–æ–≤–ª—è—Ç—å active_post_map –Ω–∞–ª–µ—Ç—É (–º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç)
active_post_map: Dict[MessageKey, Dict[str, Any]] = defaultdict(dict)
sender_to_order_maps: Dict[OrderSenderKey, Dict[OrderSenderKey, Order]] = defaultdict(dict)

channel_user_map: Dict[SenderKey, Optional[bool]] = dict()

last_welcome_message_map: Dict[int, custom.Message] = dict()

start_time = datetime.now(timezone.utc)

lock = asyncio.Lock()


# TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —Ç–µ–º, –∫–∞–∫ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ –≤—Å–µ –∏–∑ –≥—Ä—É–ø–ø—ã.
#  –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∞–µ—Ç—Å—è –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –±–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è...
# https://core.telegram.org/bots/faq#what-messages-will-my-bot-get


def add_handlers_for_draw(client):
    # TODO: –≤ –ª–æ–≥–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∫–æ–≥–æ –ø–æ—Å—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ —Ç–∞ –∏–ª–∏ –∏–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞
    #  –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ª—É—á—à–µ –ø–∏—Å–∞—Ç—å –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã, –∞ –Ω–µ –¥–æ
    # TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    # TODO: –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–º –≤ –∫–∞–Ω–∞–ª, –∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    #  –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä Inline Keyboard?
    # TODO: —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?
    #  Inline Queries: https://core.telegram.org/bots/inline#spreading-virally
    #  Inline Keyboard
    # TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inline Keyboard –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    # TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inline Keyboard –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # TODO: –≤—ã–≤–æ–¥–∏—Ç—å —á–∏—Å–ª–æ –∑–∞–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–µ—Å–µ–Ω –∏ —Å–∏–≥–Ω –Ω–∞ OBS
    # TODO: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å custom_emoji?
    #  https://core.telegram.org/api/links#custom-emoji-stickerset-links
    #  https://core.telegram.org/api/custom-emoji
    # TODO: —É–º–µ—Ç—å –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    # TODO: ??? –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –ø–æ–¥ –ø–æ—Å—Ç–æ–º –æ—Ç –±–æ—Ç–∞ –≤ —Å–ª—É—á–∞–µ –ß–ü
    # TODO: –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–∞–≤–∏–ª–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç
    # TODO: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start, /stop, –∞ —Ç–∞–∫–∂–µ `Stop and block bot` –∏ `Restart bot` –≤ –ø—Ä–æ—Ñ–∏–ª–µ –±–æ—Ç–∞
    # TODO: –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–∞—Ö —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    # TODO: –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É —è —Ç—É—Ç, –µ—Å–ª–∏ –õ—ë–ª—è –Ω–∞–∂–∞–ª–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∂–∏ —Å–µ–±—è –Ω–∞ –∑–∞–ø–∏—Å–∏ –≤—ã–∏–≥—Ä–∞–≤—à–µ–≥–æ
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—á–∞—Ç–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–æ–∂–¥–∞—Ç—å

    # –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–∞–Ω–∞–ª–µ
    @client.on(events.ChatAction(
        chats=chat_id.CHANNEL_IDS,
        # –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏–µ event.user_added, –∞ event.user_joined –Ω–µ—Ç
        # —Å–∞–º –∑–∞—à—ë–ª: user_added=True, user_joined=False, user_left=False, user_kicked=False
        # —Å–∞–º –≤—ã—à–µ–ª: user_added=False, user_joined=False, user_left=True, user_kicked=False
        # FIXME: –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        # FIXME: —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–Ω–∞: user_added=False, user_joined=False, user_left=False, user_kicked=True
        # FIXME: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –Ω–æ –ø—Ä–∞–≤–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è
        # func=lambda event: any([event.user_added, event.user_left]),
    ))
    async def channel_participant_handler(event):
        async with lock:
            logging = LOG_BOT.getChild('channel_participant_handler')

            # FIXME:
            print(f"niki channel_participant_handler event: {event}")

            if not any([event.user_added, event.user_left]):
                return

            subscribed = event.user_joined or event.user_added or not (event.user_left or event.user_kicked)

            for post_key in reversed(active_post_map):
                if post_key.chat_id != event.chat_id:
                    continue

                for user_id in event.user_ids:
                    channel_user_map[SenderKey(chat_id=post_key.chat_id, sender_id=user_id)] = subscribed

                    sender_key = OrderSenderKey(
                        post_id=post_key.chat_id, comment_id=post_key.message_id, sender_id=user_id)
                    for order in reversed(sender_to_order_maps[sender_key].values()):
                        order.update(subscribed=subscribed)

                        try:
                            # TODO: —Ö—Ä–∞–Ω–∏—Ç—å –≤ order –æ–±—ä–µ–∫—Ç message?
                            await event.client.edit_message(
                                entity=order.comment_key.chat_id,
                                message=order.comment_key.message_id,
                                text=str(order),
                                link_preview=False,
                            )
                        except errors.MessageNotModifiedError as error:
                            logging.warning(f'{error}. No changes in order "{order}"')
                        except errors.RPCError as error:
                            logging.error(f'{error}. Cannot edit order "{order}": order {order!r}')
                            continue
                        else:
                            logging.info(f'Edited order is "{order}"')

    # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    @client.on(events.InlineQuery)
    async def inline_query_handler(event):
        async with lock:
            logging = LOG_BOT.getChild('inline_query_handler')

            if not isinstance(event.query.peer_type, types.InlineQueryPeerTypeBroadcast):
                logging.warning(
                    f"not isinstance(peer_type, InlineQueryPeerTypeBroadcast): "
                        f"inline_query.query {event.query}, Update {event} skipped"
                )
                try:
                    await event.answer()
                except errors.RPCError as error:
                    logging.error(f"{error}. Cannot answer to inline query {event.query}")
                return

            # TODO: –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É–Ω–∫—Ç ordertable, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
            # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–µ + –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —á–∞—Ç –ø–µ—Ä–≤—ã–º –∫–æ–º–º–µ–Ω—Ç–æ–º

            # TODO: –º–æ–∂–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å InlineQueryResult –∏–∑-–∑–∞ –ø—É—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞?
            # TODO: –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –ø–æ–∏—Å–∫ –ø–æ inline_query['query']
            # TODO: –æ–±–µ—Å–ø–µ—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, —Ä–∞–∑—Ä–µ—à–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞
            # TODO: –º–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã —Å–ª–∞–π–¥–µ—Ä –±—ã–ª –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º? —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏?

            # TODO: —Å–æ–∑–¥–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é make_thumb
            ordertable_thumb_url = (
                'https://e7.pngegg.com/pngimages/862/929/'
                    'png-clipart-musical-instruments-bass-guitar-acoustic-guitar-string-instruments-'
                    'musical-instruments-guitar-accessory-cuatro.png'
            )
            ordertable_thumb_mime_type, _ = mimetypes.guess_type(ordertable_thumb_url)

            fansign_thumb_url = (
                'https://e7.pngegg.com/pngimages/279/99/'
                    'png-clipart-digital-cameras-graphy-video-cameras-drawing-camera-rectangle-photography.png'
            )
            fansign_thumb_mime_type, _ = mimetypes.guess_type(ordertable_thumb_url)

            builder = event.builder

            try:
                await event.answer([
                    builder.article(
                        title='ordertable üéµ',
                        description='–ø–æ—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–µ—Å–µ–Ω',
                        thumb=types.InputWebDocument(
                            url=ordertable_thumb_url,
                            size=0,
                            mime_type=ordertable_thumb_mime_type,
                            attributes=[],
                        ),
                        # TODO: –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É spoiler
                        text=config.ORDERTABLE_MARKDOWN,
                        link_preview=False,
                    ),
                    builder.article(
                        title='fansign üì∑',
                        description='–ø–æ—Å—Ç –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —Å–∏–≥–Ω',
                        thumb=types.InputWebDocument(
                            url=fansign_thumb_url,
                            size=0,
                            mime_type=fansign_thumb_mime_type,
                            attributes=[],
                        ),
                        # TODO: –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É spoiler
                        text=config.FANSIGN_MARKDOWN,
                        link_preview=False,
                    ),
                ])
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot answer to inline query {event.query}")

    async def post_handler(event):
        async with lock:
            logging = LOG_BOT.getChild('post_handler')

            # # TODO: –ø–æ–Ω—è—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å entities: [{'length': 8, 'offset': 38, 'type': 'mention'}],
            # #  text: '–ø–æ—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –Ω–∞ —Å—Ç—Ä–∏–º–µ @eljsbot'
            # # TODO: –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Ç—É–∞—Ü–∏—é –∫–æ–≥–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —É–±—Ä–∞–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
            # bot_mention = search_bot_mention(event.raw_text)
            # if not bot_mention:
            #     logging.warning(
            #         f"message.text {event.raw_text!r} doesn't mention bot {config.USERNAME!r}, "
            #             f"Update {event} skipped"
            #     )
            #     return
            # # # TODO: –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–ø–æ–º–∏–Ω–∞—Ç—å –±–æ—Ç–∞ —è–≤–Ω–æ, –Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            # # via_bot = event.via_bot
            # # if not via_bot:
            # #     logging.warning(f"message {event.message}: no via_bot, Update {event} skipped")
            # #     return
            # # elif via_bot.username != config.USERNAME:
            # #     logging.warning(
            # #         f"message.via_bot {via_bot}: username != {config.USERNAME!r}, "
            # #             f"Update {event} skipped"
            # #     )
            # #     return

            if not event.forward.saved_from_msg_id:
                logging.warning(
                    f"message.forward {event.forward}: "
                        f"no saved_from_msg_id, message was forwarded manually, Update {event} skipped"
                )
                return

            if not event.forward.channel_post:
                logging.warning(f"message.forward {event.forward}: no channel_post, Update {event} skipped")
                return

            # TODO: post_date —Ç–µ–ø–µ—Ä—å –≤ UTC+0, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å tzinfo –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª–æ–≥ –≤ UTC+0?
            post_date = event.edit_date or event.forward.date
            if not post_date:
                logging.warning(f"message {event.message}: no post_date, Update {event} skipped")
                return

            logging.info(f"Active channel post at {post_date} is \"{event.raw_text}\"")
            logging.debug(f'Active channel post ID is {event.forward.channel_post}')

            post_key = MessageKey(chat_id=event.forward.chat_id, message_id=event.forward.channel_post)
            if isinstance(event, events.MessageEdited.Event) and post_key in active_post_map:
                active_post_map[post_key]['user_order_limit'] = int(
                    event.pattern_match.group('limit') or config.USER_ORDER_LIMIT)
            else:
                active_post_map[post_key] = dict(
                    channel_id=event.forward.chat_id,
                    id=event.forward.channel_post,
                    message_id=event.id,
                    user_order_counter=Counter(),  # TODO: defaultdict(lambda: count(start=1))
                    user_order_limit=int(event.pattern_match.group('limit') or config.USER_ORDER_LIMIT),
                    count_order=count(start=1)
                )

            logging.info(f"User order limit is {active_post_map[post_key]['user_order_limit']}")

    # –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç
    post_event_kwargs = dict(
        chats=chat_id.GROUP_IDS,
        incoming=True,
        from_users=chat_id.CHANNEL_IDS,
        forwards=True,
        pattern=search_bot_mention,
    )
    client.add_event_handler(post_handler, events.NewMessage(**post_event_kwargs))
    client.add_event_handler(post_handler, events.MessageEdited(**post_event_kwargs))

    async def order_handler(event):
        async with lock:
            logging = LOG_BOT.getChild('order_handler')

            # TODO: –æ–¥–Ω–∏–º reply_to –Ω–µ –æ–±–æ–π—Ç–∏—Å—å, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞,
            #  –µ—Å–ª–∏ –≤ active_post_map –∏–Ω–∞—á–µ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏
            try:
                reply_to_message = await event.get_reply_message()
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot get reply message, Update {event} skipped")
                return

            if not reply_to_message.forward:
                logging.warning(f"no forward: message.reply_to_message {reply_to_message}, Update {event} skipped")
                return

            post_key = MessageKey(
                chat_id=reply_to_message.forward.chat_id, message_id=reply_to_message.forward.channel_post)

            if post_key not in active_post_map:
                logging.warning(
                    f"message.reply_to_message.forward {reply_to_message.forward}: "
                        f"post_key {post_key} not in active_post_map {active_post_map}, Update {event} skipped"
                )
                return

            try:
                if event.sender_id:
                    sender_id = event.sender_id
                    sender = await event.get_sender()
                else:
                    # TODO: –Ω—É–∂–µ–Ω –±–∞–≥ –Ω–∞ telethon? —É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ –∫–∞–Ω–∞–ª–∞
                    #  from_id=None –∏ sender_id=None
                    logging.warning(f"no sender_id: message {event.message}")
                    sender_id = event.chat_id
                    sender = await event.get_chat()
                    logging.warning(f"new sender is {sender}")
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot get sender, Update {event} skipped")
                return

            channel_user_key = SenderKey(chat_id=post_key.chat_id, sender_id=sender_id)

            try:
                if sender_id in [post_key.chat_id, event.chat_id]:
                    sender_subscribed = channel_user_map.setdefault(channel_user_key, True)
                elif channel_user_key in channel_user_map:
                    sender_subscribed = channel_user_map[channel_user_key]
                else:
                    sender_participant = (
                        await client.get_permissions(entity=post_key.chat_id, user=sender_id)).participant
                    sender_subscribed = not (sender_participant.has_left or sender_participant.is_banned)
                    channel_user_map[channel_user_key] = sender_subscribed
            except errors.UserNotParticipantError as error:
                logging.warning(f"{error}. Cannot get permissions for user {sender} of channel {post_key.chat_id}")
                sender_subscribed = channel_user_map[channel_user_key] = False
            except (ValueError, errors.RPCError) as error:
                logging.error(f"{error}. Cannot get permissions for user {sender} of channel {post_key.chat_id}")
                sender_subscribed = None

            # TODO: –∫–∞–∫ –æ–±–æ–π—Ç–∏—Å—å –±–µ–∑ asyncio.Lock()?
            # –µ—Å–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –ø–∞—á–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ–¥–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è,
            #  —Ç–æ –æ–Ω–∏ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è –≤ —Ö–∞–æ—Ç–∏—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ active_post_map[post_key]['user_order_limit'] –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
            #  orders_formatted —Ç–æ–∂–µ –≤ —Ö–∞–æ—Ç–∏—á–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±—É–¥–µ—Ç
            try:
                order = Order(
                    event=event,
                    post_key=post_key,
                    active_post=active_post_map[post_key],
                    sender=sender,
                    subscribed=sender_subscribed,
                )

                try:
                    # TODO: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å copyMessage + caption, –≤–º–µ—Å—Ç–æ sendMessage
                    # TODO: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç ForceReply –∏ –¥–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω
                    # TODO: –º–æ–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å reply_markup –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º?
                    sent_message = await event.respond(
                        message=str(order),
                        link_preview=False,
                        silent=True,
                        # TODO: protect_content=True, –ø–æ—Ö–æ–∂–µ –Ω–∞–¥–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—Ç—å noforwards=True
                        reply_to=reply_to_message,
                    )
                except errors.RPCError as error:
                    logging.error(f'{error}. Cannot send message "{order}": order {order!r}')
                    return

                order.comment_key = MessageKey(chat_id=event.chat_id, message_id=sent_message.id)

                user_order_counter = active_post_map[post_key]['user_order_counter']
                user_order_counter[order.sender_key] += 1
                logging.info(
                    f"User order count: {user_order_counter[order.sender_key]}, order.text is \"{order.text}\"")
            except OrderLimitIsReachedException as error:
                orders_formatted = ' '.join(
                    '[{number:0>3}](t.me/c/{chat_id}/{message_id})'.format(
                        number=order.count,
                        chat_id=event.peer_id.channel_id,
                        message_id=order_message_id,
                    )
                    for order_message_id, order in sender_to_order_maps[error.sender_key].items()
                )

                text = f'''\
–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–æ
**–º–æ–∂–Ω–æ __–∏–∑–º–µ–Ω–∏—Ç—å__ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ**,
–ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å –Ω–∞ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö:
**{orders_formatted}**
__**–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**__'''

                try:
                    # TODO: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    await event.reply(
                        message=text,
                        link_preview=False,
                        # TODO: protect_content=True, –ø–æ—Ö–æ–∂–µ –Ω–∞–¥–æ –ø—Ä–æ–∫–∏–¥—ã–≤–∞—Ç—å noforwards=True
                    )
                except errors.RPCError as reply_error:
                    logging.error(f'{reply_error}. Cannot send message "{text}" of chat {event.chat_id}')
                logging.warning(f"{error}. Update {event} skipped")
                return
            except OrderException as error:
                logging.warning(f"{error}. Update {event} skipped")
                return

            sender_to_order_maps[order.sender_key][order.comment_key.message_id] = order

            try:
                await event.delete()
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot delete message {event.message}")

    # –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ func –ø—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ–±—ã –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è reply_to_order_handler –∏ –Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ
    #  –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å get_reply_message()
    order_event_kwargs = dict(
        chats=chat_id.GROUP_IDS,
        func=lambda event: active_post_map and event.is_reply and not event.fwd_from,
        incoming=True,
        forwards=False,  # TODO: –∑–∞–≤–µ—Å—Ç–∏ –±–∞–≥ –Ω–∞ telethon? not event.fwd_from
        pattern=match_order,
    )
    client.add_event_handler(order_handler, events.NewMessage(**order_event_kwargs))
    client.add_event_handler(order_handler, events.MessageEdited(**order_event_kwargs))

    # –Ω–∞–π—Ç–∏ –ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–æ–≤
    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –≤ func –ø—Ä–æ—Å—Ç–æ–µ —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ–±—ã –æ—Ç–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è order_handler –∏ –Ω–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ
    #  –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å get_reply_message()
    @client.on(events.NewMessage(
        chats=chat_id.GROUP_IDS,
        func=lambda event: active_post_map and event.is_reply and not event.fwd_from,
        incoming=True,
        forwards=False,  # TODO: –∑–∞–≤–µ—Å—Ç–∏ –±–∞–≥ –Ω–∞ telethon? not event.fwd_from
        pattern=match_order,
    ))
    async def reply_to_order_handler(event):
        async with lock:
            logging = LOG_BOT.getChild('reply_to_order_handler')

            # TODO: –æ–¥–Ω–∏–º reply_to –Ω–µ –æ–±–æ–π—Ç–∏—Å—å, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞,
            #  –µ—Å–ª–∏ –≤ active_post_map –∏–Ω–∞—á–µ —Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏
            try:
                reply_to_message = await event.get_reply_message()
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot get reply message, Update {event} skipped")
                return

            if not reply_to_message.out:
                logging.warning(f"is not outgoing: message.reply_to_message {reply_to_message}, Update {event} skipped")
                return

            if event.sender_id:
                sender_id = event.sender_id
            else:
                # TODO: –Ω—É–∂–µ–Ω –±–∞–≥ –Ω–∞ telethon? —É —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ –∫–∞–Ω–∞–ª–∞
                #  from_id=None –∏ sender_id=None
                logging.warning(f"no sender_id: message {event.message}")
                sender_id = event.chat_id
                logging.warning(f"new sender_id is {sender_id}")

            # TODO: —É–ø—Ä–æ—Å—Ç–∏—Ç—å, –º–æ–∂–µ–º –ª–∏ –≤–∑—è—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ id —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ active_post_id?
            for post_key in reversed(active_post_map):
                sender_key = OrderSenderKey(
                    post_id=post_key.chat_id, comment_id=post_key.message_id, sender_id=sender_id)

                order = sender_to_order_maps[sender_key].get(reply_to_message.id)
                if order:
                    break
            else:
                logging.warning(
                    f"id is not found in order maps {sender_to_order_maps[sender_key]}: "
                        f"message.reply_to_message {reply_to_message}, Update {event} skipped"
                )
                return

            # TODO: –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å if order.subscribed is None
            order.update(text=event.raw_text)

            try:
                await reply_to_message.edit(text=str(order))
            except errors.MessageNotModifiedError as error:
                logging.warning(f'{error}. No changes in order "{order}"')
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot edit message {reply_to_message}")
                return
            else:
                logging.info(f'Edited order is "{order}"')

            try:
                await event.delete()
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot delete message {event.message}")


def add_handlers_for_discussion(client):
    # –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–æ–≤–∏—á–∫–∞ –≤ –≥—Ä—É–ø–ø–µ
    @client.on(events.ChatAction(
        chats=chat_id.GROUP_IDS,
        # –ø–æ—Å–ª–µ —Å–æ–±—ã—Ç–∏—è event.user_joined –≤—Å–µ–≥–¥–∞ —Å–ª–µ–¥—É–µ—Ç event.user_added
        # FIXME: –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è, –Ω–æ –ø—Ä–∞–≤–∞ –ø–æ—è–≤–ª—è—é—Ç—Å—è
        # func=lambda event: event.user_added,
    ))
    async def group_participant_handler(event):
        async with lock:
            logging = LOG_BOT.getChild('group_participant_handler')

            # FIXME:
            print(f"niki group_participant_handler event: {event}")

            if not event.user_added:
                return

            # update_state = event.client.session.get_update_state(entity_id=event.chat_id)
            # print(f"niki gevent.client.session.get_update_state(entity_id=event.chat_id): {update_state}")
            # start_remote_update_state = start_remote_update_states.get(event.chat_id)
            # if not start_remote_update_state:
            #     return

            # ignore the missed updates while the client was offline
            # FIXME: —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∫–∞–∫ –æ—Ç–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è
            # https://core.telegram.org/api/updates#update-handling
            # start_remote_update_states = dict(client.session.get_update_states())
            # state = await self(functions.updates.GetStateRequest())
            # ss, cs = self._message_box.session_state()
            # if start_time > event.original_update.date:
            # if event.original_update.pts < start_remote_update_state.pts:
            # FIXME: —É UpdateNewChannelMessage –Ω–µ—Ç—É date, –∏ –≤ message —Ç–æ–∂–µ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å
            from types import SimpleNamespace
            event_date = getattr(
                event.original_update,
                'date',
                getattr(getattr(event.original_update, 'message', SimpleNamespace(date=None)), 'date', None)
            )
            if event_date and event_date < start_time:
                logging.warning(
                    f"event_date {event_date} < start_time {start_time}, "
                        f"Update {event} skipped"
                )
                return

            try:
                # TODO: –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç message?
                sent_message = await event.client.send_message(
                    entity=event.chat_id,
                    message=config.WELCOME_MESSAGE_MARKDOWN,
                    link_preview=False,
                    buttons=[[types.KeyboardButtonUrl(
                        text=config.WELCOME_MESSAGE_BUTTON_TEXT,
                        url=config.WELCOME_MESSAGE_BUTTON_URL,
                    )]],
                    silent=True,
                )
            except errors.RPCError as error:
                logging.error(
                    f'{error}. Cannot send message "{config.WELCOME_MESSAGE_MARKDOWN}": chat_id {event.chat_id}')
                return

            last_welcome_message = last_welcome_message_map.get(event.chat_id)
            last_welcome_message_map[event.chat_id] = sent_message
            logging.info(f"last_welcome_message is {sent_message}: chat_id {event.chat_id}")

            if not last_welcome_message:
                return

            try:
                await last_welcome_message.delete()
            except errors.RPCError as error:
                logging.error(f"{error}. Cannot delete message {last_welcome_message}")


def main():
    logging = LOG_BOT.getChild('main')

    api_id, _, api_hash = os.environ['JUKEBOX_BOT_APP_API_TOKEN'].partition(':')
    bot_token = os.environ['JUKEBOX_BOT_AUTH_TOKEN']

    with TelegramClient(
            session=str(config.SESSION_DIR / 'bot'), api_id=int(api_id), api_hash=api_hash,
            request_retries=config.REQUEST_RETRIES,
            connection_retries=config.CONNECTION_RETRIES,
            retry_delay=config.RETRY_DELAY,
    ).start(bot_token=bot_token) as client:
        logging.debug(client)

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞:
        # - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∫–∞–Ω–∞–ª–æ–º –≥—Ä—É–ø–ø—ã;
        # - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ;
        # - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞;

        # TODO: —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å
        # TODO: –ø–æ—Ö–æ–∂–µ –∏–∑-–∑–∞ inline_mode —Å–æ–∑–¥–∞—é—Ç—Å—è —Ç–∞–∫–∂–µ –∫–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ, –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–∞–∫–æ–≥–æ scope:
        #  - /ordertable@jkbxbot
        #  - /fansign@jkbxbot

        add_handlers_for_draw(client)
        add_handlers_for_discussion(client)

        try:
            client.loop.run_until_complete(client.disconnected)
        except KeyboardInterrupt:
            pass
        finally:
            for last_welcome_message in last_welcome_message_map.values():
                try:
                    last_welcome_message.delete()
                except errors.RPCError as error:
                    logging.error(f"{error}. Cannot delete message {last_welcome_message}")
            client.disconnect()


if __name__ == '__main__':
    # TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ python-telegram? https://github.com/alexander-akhmetov/python-telegram
    # TODO: –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ pyrogram? https://github.com/pyrogram/pyrogram
    # TODO: –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–∞–∫–µ—Ç uvloop
    main()
